#pragma once




#define TRUE    1
#define FALSE   0

#define MAX_SIZE 10		// 04 마방진 배열 사이즈

////////////////////////////////////////////////////////////////////
// 01.최대공약수 Greatest Common Divisor
// 유클리드 호제법 Euclidean algorithm
// 유클리드(B.C.365~B.C.275)는 기하학의 아버지라고 불리는 유명한 고대 수학자입니다.
// 유클리드의 저서 중에서 가장 유명한 것이 총 13권으로 구성된 '기하학 원본'입니다.
// 이 책은 그의 선배인 피타고라스,플라톤,히포크라테스 등이 연구한 여러 가지 자료를
// 정선하고 거기에 자신의 창작을 가미하여 조직적인 교과서로 편찬한 것으로서
// 수학사상 최고의 성전이라고도 할 수 있습니다.
int getGCD(int nFir, int nSec);

////////////////////////////////////////////////////////////////////
// 02.하노이탑 Hanoi Tower
// 883년 프랑스 수학자 루카스(Lucas.E)는 하노이 탑이라고 불려지게 된 유명한 문제를
// 고안해냈습니다. 전설에 따르면 천지 창조시에 가운데에 작은 구멍이 뚫린 64개의 금으로 된
// 원판이 하노이의 한 사원에 보관되어 있었다고 합니다. 이들 원판은 어느 것도 크기가 같지
// 않으며, 작은 원판이 큰원판 위에 오도록 포개어져, 세개의 기둥 가운데 한 개에 끼워져
// 있었다고 합니다. 이러한 모양이 탑과 비슷하다하여 하노이탑(Hanoi Tower)이라 부릅니다.
// 조물주가 사원의 승려에게 명하기를 '64개의 원판을 하나씩 옮겨서 다른 기둥 위에 원래
// 상태대로 옮겨 놓되 옮기는 과정에서 절대로 큰 원판이 작은 원판 위에 놓이지 않도록
// 하라고 했습니다. 모든 원판이 옮겨지면 세상은 종말이 올 것이며 충실한 자는 상을 받을
// 것이고 불충실한 자는 벌을 받을 것이다'라고 했다는데 만일 승려들이 매우 빠르게
// 움직여 매초에 한개씩 옮긴다면 전부 옮기는데 얼마나 걸릴까요?
void Hanoi(int n, char from, char middle, char to);

////////////////////////////////////////////////////////////////////
// 03. 소수 Prime Number
// 소수(Prime Number)의 사전적인 의미는 "1보다 큰 정수 p가 1과 p자신 이외의 양의
// 약수를 가지지 않을 때의 p"입니다. 이를테면 2,3,5,7,11,13,17,...등을 소수라
// 부릅니다. 반대로 다른 숫자의 곱으로 이루어진 4(2*2), 6(2*3)...등 소수가 아닌
// 자연수를 "합성수"라고 합니다. 참고로 1은 소수도 아니고 합성수도 아닙니다.
int IsPrimeNumber(int n);

////////////////////////////////////////////////////////////////////
// 04. 마방진 Magic Square
// 중국 전설의 주인공인 한나라의 우임금은 홍수를 다스리려고 황하강의 지류에서 물길을
// 고치다가 거북 등껍질에 새겨진 이상한 그림을 얻었다고 합니다. 낙서라 불리는 이 그림에는
// 1부터 9까지의 숫자가 3*3의 정사각형에 배열되 있었다고 합니다. 그런데 신기한 것은
// 늘어선 숫자들이 가로,세로, 대각선 어느 방향으로 더해도 그 합이 15가 되는 것이었습니다.
// 그래서 고대 중국에서는 이 낙서가 우주의 원리를 포함하고 있다고 여기고 신비한 힘을
// 가지고 있다고 생각하게 되었습니다. 이처럼 1부터 연이은 숫자를 정사각형 모양으로 배열해
// 가로와 세로, 대각선 방향의 합이 모두 같도록 배열한 것을 "마방진"이라고 합니다.
// 마방진에는 가로,세로를 구성하는 항목의 개수에 따라서 여러 차수의 마방진이 존재합니다.
// 즉 가로 세로가 3개의 항목으로 구성된 낙서는 3차 마방진이 되며, 4개의 항목으로
// 구성되면 4차 마방진이라고 합니다. 옛날부터 많은 사람들이 이와 같이 신비로운 마방진에
// 몰두해왔는데 지금 이 순간에도 새로운 마방진 해법이 연구되고 있으며 세상에 소개되고
// 있습니다. 여기에서는 가장 많이 쓰이고 있는 홀수 마방진과 4의 배수 마방진을 알아봅니다.
// 4-1 홀수차 마방진
void InitSquare();
void GetOddSquare(int n);
void ShowSquare(int n);
// 4-2 4의 배수 마방진 그림 관계로 설명 생략 생각해서 채우기
int IsInBlock(int n, int row, int col);
/*void InitSquare();
void GetQuaterSquare(int n);
void ShowSquare(int n);
*/
////////////////////////////////////////////////////////////////////
// 05. 배열 Array
// 자료구조와 알고리즘
// 컴퓨터는 입력되는 데이터를 빠르게 연산하여 정확한 결과를 출력하는 기능을 수행합니다.
// 많은 양의 데이터에 대해서 복잡한 연산을 수행하면서도 빠르고 정확한 처리를 하는데에는
// 데이터를 어떻게 다루고 저장하느냐에 따라서 많은 차이를 보이게 됩니다.
// 컴퓨터는 데ㅣ터 처리를 위해서 메모리라는 저장공간으로부터 CPU(중앙처리장치)를 거쳐
// 어떠한 연산을 거치게 됩니다. 메모리는 낮은 번지에서 높은 번지까지 수많은 저장공간으로
// 구성되어 있습니다. 자료를 다루는 목적에 따라 어떠한 위치에 어떠한 방법으로 저장하는
// 것이 가장 효율적인지 결정됩니다. 컴퓨터 알고리즘 서적에서 자료구조를 빠뜨리지 않고
// 설명하는 이유가 바로 여기에 있습니다. 데이터를 효율적으로 합리적으로 다루는 것이
// 프로그램에 있어서 가장 기본적이고 궁극적으로 중요한 부분이기 때문입니다.
//
// 배열의 필요성
// 프로그램에서 처리에 필요한 데이터를 저장하기 위해서 변수를 선언하고 이를 이용해서 값을
// 저장하고 읽습니다. 하지만 처리해야 할 데이터가 매우 많다면 일일이 변수를 선언해서 각각
// 변수명을 정리해줘야 할까요? 이와 같이 동일한 자료형으로 구성된 많은 데이터를 저장하기
// 위하여 제공되는 것이 바로 배열이며, 이는 가장 기본적인 자료구조입니다.
// 프로그래밍에서 배열(Array)은 동일한 성질을 가지고 있는 자료들의 집합을 의미합니다.
//
// 배열의 장점
// 일반적으로 데이터란 복수개의 자료가 모여진 집합을 의미하므로 배열은 이러한 여러 개의
// 데이터를 저장하고 처리하기 위한 가장 기본적인 자료구조로 사용됩니다.흔히 배열은 리스트
// 구조와 비교해서 아래와 같은 장점과 단점을 가집니다.
// 장점
// 1. 배열내의 특정 데이터에 빠르게 접근할 수 있습니다.
// 2. 정적인 데이터 처리에서 기억장소를 효율적으로 활용할 수 있습니다.
// 단점
// 1. 배열내의 특정 위치에 데이터를 삽입하거나 삭제할 경우 많은 작업을 필요로 합니다.
// 2. 배열의 크기를 최대로 선언해야 합니다.(메모리 측면세서 비효율적이며 낭비임)
//
// 2차원 배열을 이용하여 출력하는 프로그램
// *****
//
// *****
//
// *****
void ArrayExample();

////////////////////////////////////////////////////////////////////
// 06. 링크 Link

////////////////////////////////////////////////////////////////////
// 07. 스택 Stack

////////////////////////////////////////////////////////////////////
// 08. 큐 Queue

////////////////////////////////////////////////////////////////////
// 09. 트리 Tree

////////////////////////////////////////////////////////////////////
// 10. 정렬 Sorting

////////////////////////////////////////////////////////////////////
// 11. 검색 Searching

////////////////////////////////////////////////////////////////////
// 12. 암호화 Cryptography

////////////////////////////////////////////////////////////////////
// 13. 압축 Compress
